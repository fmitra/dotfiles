set nocompatible
filetype off

" Set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

set backupdir=~/.vim/backup/
set directory=~/.vim/swp/

" Plugins
Plugin 'gmarik/Vundle.vim'
Plugin 'scrooloose/nerdtree'
Plugin 'jnurmine/Zenburn'
Plugin 'vim-airline/vim-airline'
Plugin 'fatih/vim-go'
Plugin 'junegunn/fzf'
Plugin 'junegunn/fzf.vim'
Plugin 'nathanaelkane/vim-indent-guides'
Plugin 'sheerun/vim-polyglot'
Plugin 'qpkorr/vim-bufkill'
Plugin 'christoomey/vim-tmux-navigator'
Plugin 'vim-syntastic/syntastic'
Plugin 'ervandew/supertab'
Plugin 'tpope/vim-fugitive'
Plugin 'zivyangll/git-blame.vim'

call vundle#end()

" Code folding
set foldmethod=syntax
set foldlevelstart=20

" Ag search (silver searcher plugin)
let g:ackprg = 'ag --nogroup --nocolor --column'

" Allow Ag search into subdirecotyr
" :Rag my-string my-dir/foo/bar/
command! -bang -nargs=+ -complete=dir Rag call fzf#vim#ag_raw(<q-args>, {'options': '--delimiter : --nth 4..'}, <bang>0)

" Syntax settings
filetype plugin indent on
syntax on
set encoding=utf-8
set t_Co=256
set nu
colorscheme zenburn
set cursorline

set expandtab
set showmatch
set hlsearch
set ignorecase

autocmd BufNewFile,BufRead *.py setlocal tabstop=4 softtabstop=4 shiftwidth=4 expandtab smarttab autoindent
autocmd BufNewFile,BufRead *.go setlocal tabstop=4 softtabstop=4 shiftwidth=4 smarttab autoindent
autocmd BufNewFile,BufRead *.js setlocal tabstop=2 softtabstop=2 shiftwidth=2 expandtab smarttab autoindent
autocmd BufNewFile,BufRead *.json setlocal tabstop=2 softtabstop=2 shiftwidth=2 expandtab smarttab autoindent
autocmd BufNewFile,BufRead *.jsx setlocal tabstop=2 softtabstop=2 shiftwidth=2 expandtab smarttab autoindent
autocmd BufNewFile,BufRead *.tsx setlocal tabstop=2 softtabstop=2 shiftwidth=2 expandtab smarttab autoindent
autocmd BufNewFile,BufRead *.ts setlocal tabstop=2 softtabstop=2 shiftwidth=2 expandtab smarttab autoindent
autocmd BufNewFile,BufRead *.hbs setlocal tabstop=2 softtabstop=2 shiftwidth=2 expandtab smarttab autoindent
autocmd BufNewFile,BufRead *.esj setlocal tabstop=2 softtabstop=2 shiftwidth=2 expandtab smarttab autoindent
autocmd BufNewFile,BufRead *.html setlocal tabstop=2 softtabstop=2 shiftwidth=2 expandtab smarttab autoindent
autocmd BufNewFile,BufRead *.scss setlocal tabstop=2 softtabstop=2 shiftwidth=2 expandtab smarttab autoindent
autocmd BufNewFile,BufRead *.css setlocal tabstop=2 softtabstop=2 shiftwidth=2 expandtab smarttab autoindent
autocmd BufNewFile,BufRead *.styl setlocal tabstop=2 softtabstop=2 shiftwidth=2 expandtab smarttab autoindent

" Disable Go autoformating on save
let g:go_fmt_autosave = 0

" Split navigations
"nnoremap <C-J> <C-W><C-J>
"nnoremap <C-K> <C-W><C-K>
"nnoremap <C-L> <C-W><C-L>
"nnoremap <C-H> <C-W><C-H>

" Git Blame (\s)
nnoremap <Leader>s :<C-u>call gitblame#echo()<CR>

" Nerd tree
map <C-n> :NERDTreeToggle<CR>
" Open current file \v
nnoremap <silent> <Leader>v :NERDTreeFind<CR>
let NERDTreeShowLineNumbers=1
let NERDTreeMinimalUI=1
let NERDTreeWinSize=55
let NERDTreeShowHidden=1

" https://github.com/preservim/nerdtree
" If another buffer tries to replace NERDTree, put it in the other window, and bring back NERDTree.
autocmd BufEnter * if bufname('#') =~ 'NERD_tree_\d\+' && bufname('%') !~ 'NERD_tree_\d\+' && winnr('$') > 1 |
    \ let buf=bufnr() | buffer# | execute "normal! \<C-W>w" | execute 'buffer'.buf | endif

" FZF and Ag
map <C-p> :FZF<CR>
map <C-f> :Ag<CR>

" Buffer swapping
map <Tab> :bn<CR>
map <S-Tab> :bp<CR>
map <C-c> :BD<CR>

let g:airline#extensions#tabline#enabled = 1

let python_highlight_all = 1

set clipboard=unnamed
:set backspace=indent,eol,start

" Treat underscores as a word
set iskeyword-=_

" Highlight trailing whitespace
highlight ExtraWhitespace ctermbg=red guibg=red
match ExtraWhitespace /\s\+$/
autocmd BufWinEnter * match ExtraWhitespace /\s\+$/
autocmd InsertEnter * match ExtraWhitespace /\s\+\%#\@<!$/
autocmd InsertLeave * match ExtraWhitespace /\s\+$/
autocmd BufWinLeave * call clearmatches()

" Syntastic
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

map <C-w> :SyntasticCheck<CR>
map <C-e> :SyntasticReset<CR>
let g:syntastic_mode_map = {"mode": "passive"}
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1

let g:syntastic_python_checkers = ['pylint']
let g:syntastic_js_checkers = ['eslint']

" yank file path and line number (\y)
nnoremap <silent> <Leader>y :let @+=expand("%") . ':' . line(".")<CR>
